//============================================================================
// Name        : retina_tutorial.cpp
// Author      : Alexandre Benoit, benoit.alexandre.vision@gmail.com
// Version     : 0.1
// Copyright   : LISTIC/GIPSA French Labs, july 2012
// Description : Gipsa/LISTIC Labs retina demo in C++, Ansi-style
//============================================================================

#include <iostream>
#include <cstring>

#include "opencv2/bioinspired.hpp"
#include "opencv2/highgui.hpp"

static void help(std::string errorMessage)
{
    std::cout << "Program init error : " << errorMessage << std::endl;
    std::cout << "\nProgram call procedure : retinaDemo [processing mode] [Optional : media target] [Optional LAST parameter: \"log\" to activate retina log sampling]" << std::endl;
    std::cout << "\t[processing mode] :" << std::endl;
    std::cout << "\t -image : for still image processing" << std::endl;
    std::cout << "\t -video : for video stream processing" << std::endl;
    std::cout << "\t[Optional : media target] :" << std::endl;
    std::cout << "\t if processing an image or video file, then, specify the path and filename of the target to process" << std::endl;
    std::cout << "\t leave empty if processing video stream coming from a connected video device" << std::endl;
    std::cout << "\t[Optional : activate retina log sampling] : an optional last parameter can be specified for retina spatial log sampling" << std::endl;
    std::cout << "\t set \"log\" without quotes to activate this sampling, output frame size will be divided by 4" << std::endl;
    std::cout << "\nExamples:" << std::endl;
    std::cout << "\t-Image processing : ./retinaDemo -image lena.jpg" << std::endl;
    std::cout << "\t-Image processing with log sampling : ./retinaDemo -image lena.jpg log" << std::endl;
    std::cout << "\t-Video processing : ./retinaDemo -video myMovie.mp4" << std::endl;
    std::cout << "\t-Live video processing : ./retinaDemo -video" << std::endl;
    std::cout << "\nPlease start again with new parameters" << std::endl;
    std::cout << "****************************************************" << std::endl;
    std::cout << " NOTE : this program generates the default retina parameters file 'RetinaDefaultParameters.xml'" << std::endl;
    std::cout << " => you can use this to fine tune parameters and load them if you save to file 'RetinaSpecificParameters.xml'" << std::endl;
}

int CameraConfig(cv::VideoCapture videoCapture) {
    // welcome message
    std::cout << "****************************************************" << std::endl;
    std::cout << "* Retina demonstration : demonstrates the use of is a wrapper class of the Gipsa/Listic Labs retina model." << std::endl;
    std::cout << "* This demo will try to load the file 'RetinaSpecificParameters.xml' (if exists).\nTo create it, copy the autogenerated template 'RetinaDefaultParameters.xml'.\nThen tweak it with your own retina parameters." << std::endl;
    // basic input arguments checking



    // declare the retina input buffer... that will be fed differently in regard of the input media
    cv::Mat inputFrame;
    ; // in case a video media is used, its manager is declared here

    //////////////////////////////////////////////////////////////////////////////
    // checking input media type (still image, video file, live video acquisition)
    videoCapture >> inputFrame;
    if (inputFrame.empty())
    {
        help("Input media could not be loaded, aborting");
        return -1;
    }


    //////////////////////////////////////////////////////////////////////////////
    // Program start in a try/catch safety context (Retina may throw errors)
    try
    {
        // create a retina instance with default parameters setup, uncomment the initialisation you wanna test
        cv::Ptr<cv::bioinspired::Retina> myRetina;

        myRetina = cv::bioinspired::Retina::create(inputFrame.size());

        // save default retina parameters file in order to let you see this and maybe modify it and reload using method "setup"
        myRetina->write("RetinaDefaultParameters.xml");

        // load parameters if file exists
        myRetina->setup("RetinaSpecificParameters.xml");

        // reset all retina buffers (imagine you close your eyes for a long time)
        myRetina->clearBuffers();

        // declare retina output buffers
        cv::Mat retinaOutput_parvo;
        cv::Mat retinaOutput_magno;

        // processing loop with no stop condition
        for (;;)
        {
            // if using video stream, then, grabbing a new frame, else, input remains the same
            if (videoCapture.isOpened())
                videoCapture >> inputFrame;

            // run retina filter on the loaded input frame
            myRetina->run(inputFrame);
            // Retrieve and display retina output
            myRetina->getParvo(retinaOutput_parvo);
            myRetina->getMagno(retinaOutput_magno);
            cv::imshow("retina input", inputFrame);
            cv::imshow("Retina Parvo", retinaOutput_parvo);
            cv::waitKey(10);
        }
    }
    catch (const cv::Exception& e)
    {
        std::cerr << "Error using Retina or end of video sequence reached : " << e.what() << std::endl;
    }

    // Program end message
    std::cout << "Retina demo end" << std::endl;

    return 0;
}